@page "/"
@using FirstCome.Logica
@using FirstCome.Store.State
@using Shared
@*@inject BloqueControl _bloqueControl*@
@*@inherits Fluxor.Blazor.Web.Components.FluxorComponent
    @inject IState<ProcesoState> ProcesoState
    @inject StateFacade Facade
*@

<PageTitle>Index</PageTitle>

<div class="alert alert-info" role="alert" style="text-align:center; height:70px">
    <h3>Algoritmo Shortest Remaining Time First</h3>
</div>

<div style="text-align:center; ">
    <button type="button" class="btn btn-primary" @onclick="IniciarBloque">Agregar procesos aleatoriamente</button>
    <button type="button" class="btn btn-success" @onclick="IniciarEjecucion">Expedir proceso</button>
    <button type="button" class="btn btn-primary" @onclick="Agregar">Agregar proceso</button>
    <button type="button" class="btn btn-danger" @onclick="Bloquear">Bloquear proceso</button>
    @*<button @onclick="Reinicio">Reiniciar</button>*@


</div>

<br />

<div style="text-align:center">
    @if (EstadoInicial.Semaforo == false)
    {
        <p style="color:green"> (Semaforo) Sección critica libre</p>
    }
    else
    {
        <p style="color:red">(Semaforo) Sección critica ocupada</p>

    }

     

</div>


<br />
<br />


<div class="container">
    <div class=row>
        <div class="col">
            @if (EstadoInicial.ProcesosListos.Any())
            {
                <TableComponent Items=EstadoInicial.ProcesosListos>
                    <TableHeader>
                        <th>Proceso</th>
                        <th>Tiempo Llegada</th>
                        <th>Rafaga</th>

                    </TableHeader>
                    <RowTemplate>
                        <td>
                            @context.Name
                        </td>
                        <td>
                            @context.TiempoLlegada
                        </td>
                        <td>
                            @context.Rafaga
                        </td>
                    </RowTemplate>
                </TableComponent>
              
            }
            else
            {
                @*<p style="text-align:center">No hay más procesos en el estado Listo</p>*@
                <div class="alert alert-danger" role="alert" style="text-align:center">
                    No hay procesos en el estado Listo
                </div>
            }

        </div>

        <div class="col">
            @if (EstadoInicial.FinalProceso.Any())
            {

                <TableComponent Items="EstadoInicial.FinalProceso">
                    <TableHeader>
                        <th>Proceso..</th>
                        <th>T. Llegada</th>
                        <th>Rafaga</th>
                        <th>Tiempo Comienzo</th>
                        <th>Tiempo Final</th>
                        <th>Tiempo Retorno</th>
                        <th>Tiempo Espera</th>
                    </TableHeader>
                    <RowTemplate>
                        <td style="border: 1px solid #ddd">
                            @context.Name
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.TiempoLlegada
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.Rafaga
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.TiempoComienzoTexto
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.TiempoFinal
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.TiempoRetorno
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.TiempoEspera
                        </td>
                    </RowTemplate>
                </TableComponent>
            }
            else
            {
                @*<p style="text-align:center">No hay procesos finalizados aun</p>*@
                <div class="alert alert-danger" role="alert" style="text-align:center">
                    No hay procesos finalizados aun
                </div>
            }

        </div>
    </div>
</div>

<br />
<br />


<div class="alert alert-primary" role="alert" style="text-align:center; height:55px">
    Diagrama de Gannt
</div>
@*Dibujando los numeros*@
@for (var i = 0; i < 51; i++)
{
    <div style="position:relative; display:inline; left:@(i*20+22)px; ">
        <p style="display:inline; font-size:12px">@i</p>
    </div>

}
@*Dibujando las lineas verticales*@
<div style="margin-left:10px">
    @for (var i = 0; i < 73; i++)
    {
        <div style="position:relative;  display:inline; left:@(i*20+20)px; width:20px; border: 1px solid black"></div>

    }
</div>

@*//Linea*@
<br />

<div style="position:relative; display:inline width:@(EstadoInicial.TiempoGlobal*20)px; border: 1px solid black"></div>

<br />



@*// Dibujando los cuadrados*@

@foreach (var proc in procesoUIs)
{
    int index = procesoUIs.IndexOf(proc);
    
    @if (index == 0)
    {
        // Dibujo el mismo proceso en ejecucion
        <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=proc.Posicion />
        // Trying to draw the waiteing time
        @*<ProcesoUI Color="green"  Posicion=proc.Posicion-1/>*@
         poscTemp = 0.0;
    }
    else
    {
        
        aux = 1;
        @if (procesoUIs[(index - aux)].Id == proc.Id && poscTemp==0.0)
        {
            // Dibujo el mismo proceso en ejecucion
            <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=proc.Posicion />
            
             @*<ProcesoUI Color="green" Posicion=proc.Posicion-1/>*@
            @*<ProcesoUI Color="gray" Posicion=proc.Posicion-1/>*@
        }

        else
        {
             poscTemp = proc.Posicion + 0.3;
             @if (procesoUIs[(index - aux)].Id == proc.Id)
        {
            // Dibujo el mismo proceso en ejecucion
            <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=poscTemp />
             @*<ProcesoUI Color="green" Posicion=proc.Posicion-1/>*@
            @*<ProcesoUI Color="gray" Posicion=proc.Posicion-1/>*@
        } else
        {
           
            <br />
            // Dibujo el nuevo proceso en ejecucion
            <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=poscTemp />
                @*<ProcesoUI Id=@proc.Id Color="gray" Posicion=proc.Posicion-1/>*@
                
               
            }
        }

       
    }
   

}
@*// Dibujando los tiempos de espera*@
@foreach (var anulado in EstadoInicial.ProcesosListos)
{
    if ((anulado.TiempoLlegada < EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
    {
        <br />
        @* <p>rafaga en espera: @anulado.Name</p>*@
        @*<div style="position:relative; left:@(EstadoInicial.TiempoGlobal*20+10)px; background-color:gray; border: 1px solid black; width:20px; height:20px"></div>*@

        // foreach (var espera in procesoUIs)
        //{
        
        <ProcesoUI Color="gray" Posicion=EstadoInicial.TiempoGlobal Id=@anulado.Name />
        //procesoEspera.Add(new ProcesoUI { Id = anulado.Name, Posicion = EstadoInicial.TiempoGlobal });


        //}
    }
}
<br />
@*// Dibujando el nombre del proceso en ejecucion*@
@if (EstadoInicial.ListaEjecucion.Any())
{
    foreach (var eje in EstadoInicial.ListaEjecucion)
    {
        @*<p style="display:inline; color:green">Proceso en ejecucion: @eje.Name</p>*@

       @* <div class="alert alert-success" role="alert" style="height:55px; text-align:center ">
            Proceso en ejecucion: @eje.Name
        </div>*@
    }
}

@*// Dibujando el nombre del proceso en espera*@
@foreach (var anulado in EstadoInicial.ProcesosListos)
{
    if ((anulado.TiempoLlegada <= EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
    {
        @*<p style="color:gray">Proceso(s) en espera: @anulado.Name</p>*@
       
        @*<div class="alert alert-dark" role="alert" style="height:55px; text-align:center">
           Proceso en espera: @anulado.Name
        </div>*@
    }
}
<br />
<br />



@code {
    private BloqueControl bloqueControl;
    private EstadoEjecucion estadoEjecucion;
    private EstadoBloqueo estadoBloqueo;
    Queue<Proceso> UiList = new Queue<Proceso>();
    List<Proceso> TempProceso = new List<Proceso>();
    Proceso TempP = new Proceso();
    Proceso procesoUi = new Proceso();
    List<int> rafagas = new List<int>();
    private int contadorUi = 0;
    List<int> tiempoUi = new List<int>();
    List<ProcesoUI> procesoUIs = new List<ProcesoUI>();
    private int aux = 0;
    private int quantumAlterno = 0;
    private int quantum = 2;
    private double poscTemp = 0.0;

    protected override Task OnInitializedAsync()
    {
        bloqueControl = new BloqueControl();
        estadoEjecucion = new EstadoEjecucion();
        //bloqueControl.AgregarProcesoInicial();
        EstadoInicial.Semaforo = false;
        return base.OnInitializedAsync();
    }

    public async Task IniciarEjecucion()
    {

        while (EstadoInicial.ProcesosListos.Count > 0)
        {
            
            Proceso siguiente = EstadoInicial.ProcesosListos.Dequeue();
            Console.WriteLine("rafaga temporal: " + siguiente.RafagaTemporal);
            procesoUi = siguiente;
            rafagas.Add(EstadoInicial.TiempoGlobal);
            tiempoUi.Add(EstadoInicial.TiempoGlobal);
            siguiente.TiempoComienzo = EstadoInicial.TiempoGlobal;
            siguiente.TiempoComienzoTexto += EstadoInicial.TiempoGlobal;
            await Task.Delay(1500);


            while (siguiente.RafagaTemporal > 0 && EstadoInicial.ProcesoBloqueado == false )
            {
                
                await estadoEjecucion.Ejecutar(siguiente);
                EstadoInicial.TiempoGlobal++;
                procesoUIs.Add(new ProcesoUI { Id = siguiente.Name, Posicion = EstadoInicial.TiempoGlobal, Color = "green" });

                rafagas[(rafagas.Count - 1)] = rafagas[(rafagas.Count - 1)] + 1;
                tiempoUi.Add(EstadoInicial.TiempoGlobal);

                await Task.Delay(1500);

                StateHasChanged();

                EstadoInicial.ProcesosListos = EstadoInicial.OrganizarListaRafaga(EstadoInicial.ProcesosListos.ToList(), EstadoInicial.TiempoGlobal);
                TempProceso = EstadoInicial.ProcesosListos.ToList();

                if (TempProceso.Count != 0)

                    TempP = TempProceso[0];
                else
                    TempP = siguiente;

                if (TempP.RafagaTemporal < siguiente.RafagaTemporal)
                {
                    siguiente.Expulsado = true;
                   
                    siguiente.TiempoComienzoTexto += "-";
                    //siguiente.TiempoRetorno = EstadoInicial.TiempoGlobal - siguiente.TiempoLlegada;
                    //siguiente.TiempoEspera = ((siguiente.TiempoRetorno - siguiente.RafagaTemporal) + siguiente.TiempoEspera);
                    //siguiente.TiempoEsperaTexto += siguiente.TiempoEspera+ "-";
                    //siguiente.FueBloqueado = false;
                    
                    EstadoInicial.ListaEjecucion.Remove(siguiente);
                    EstadoInicial.ProcesosListos.Enqueue(siguiente);
                    Console.WriteLine("rafaga temporal proceso expulsado: " + siguiente.RafagaTemporal);
                    break;


                }
            }
               @* if (EstadoInicial.ListaEjecucion.Contains(siguiente))
                {
                    // Esta varable controla que el proceso calcule el t. final con la rafaga restante
                    siguiente.Expulsado = true;
                    //siguiente.FueBloqueado = false;

                    EstadoInicial.ListaEjecucion.Remove(siguiente);
                EstadoInicial.ProcesosListos.Enqueue(siguiente);
                }*@
            EstadoInicial.ProcesoBloqueado = false;

            siguiente.Bloqueado = false;

            contadorUi++;


        }
    }

    // Bloqueo de procesos
    public async Task Bloquear()
    {
        EstadoInicial.ProcesoBloqueado = true;
        foreach (Proceso bloqueado in EstadoInicial.ListaEjecucion)
        {
            bloqueado.FueBloqueado = true;
            // Genera simplemente un Warning en el navegador
            bloqueado.TiempoComienzoTexto += "-";
            EstadoInicial.ListaEjecucion.Remove(bloqueado);
            EstadoInicial.ProcesosListos.Enqueue(bloqueado);
            Console.WriteLine("Rafaga temporal: "+ bloqueado.RafagaTemporal);
        }
    }
    public async Task IniciarBloque()
    {
        //Console.WriteLine("Aca");
        await bloqueControl.AgregarProcesoInicial();
        //UiList = EstadoInicial.ProcesosListos;
        //Facade.AddProceso(EstadoInicial.ProcesosListos);
    }

    public async Task Reinicio()
    {
        EstadoInicial.ProcesosListos.Clear();
        EstadoInicial.ListaEjecucion.Clear();
        EstadoInicial.FinalProceso.Clear();

    }
    public async Task Agregar()
    {
        await bloqueControl.AgregarNuevoProceso();

    }


}
