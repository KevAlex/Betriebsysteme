@page "/"
@using FirstCome.Logica
@using FirstCome.Store.State
@using Shared
@*@inject BloqueControl _bloqueControl*@
@*@inherits Fluxor.Blazor.Web.Components.FluxorComponent
    @inject IState<ProcesoState> ProcesoState
    @inject StateFacade Facade
*@

<PageTitle>Index</PageTitle>

<div class="alert alert-info" role="alert" style="text-align:center; height:70px">
    <h3>Algoritmo STRF</h3>
</div>

<div style="text-align:center; ">
    <button type="button" class="btn btn-primary" @onclick="IniciarBloque">Agregar procesos aleatoriamente</button>
    <button type="button" class="btn btn-success" @onclick="IniciarEjecucion">Expedir proceso</button>
    <button type="button" class="btn btn-primary" @onclick="Agregar">Agregar proceso</button>
    <button type="button" class="btn btn-danger" @onclick="Bloquear">Bloquear proceso</button>
    @*<button @onclick="Reinicio">Reiniciar</button>*@


</div>

<br />

<div style="text-align:center">
    @if (EstadoInicial.Semaforo == false)
    {
        <p style="color:green"> (Semaforo) Sección critica libre</p>
    }
    else
    {
        <p style="color:red">(Semaforo) Sección critica ocupada</p>

    }

</div>

<br />
<br />


<div class="container">
    <div class=row>
        <div class="col">
            @if (EstadoInicial.ProcesosListos.Any())
            {
                <TableComponent Items=EstadoInicial.ProcesosListos>
                    <TableHeader>
                        <th>Proceso</th>
                        <th>Tiempo Llegada</th>
                        <th>Rafaga</th>
                        <th>Tiempo Comienzo</th>
                        <th>Tiempo Final</th>
                        <th>Tiempo Retorno</th>
                        <th>Tiempo Espera</th>
                    </TableHeader>
                    <RowTemplate>
                        <td>
                            @context.Name
                        </td>
                        <td>
                            @context.TiempoLlegada
                        </td>
                        <td>

                            @if (@context.RafagaH.Any())
                            {
                                foreach (var item in context.RafagaH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.RafagaTemporal
                            }
                    </td>
                    <td style="border: 1px solid #ddd">

                            @if (@context.TiempoComienzoH.Any())
                            {
                                foreach (var item in context.TiempoComienzoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoComienzo
                            }
                    </td>
                    <td style="border: 1px solid #ddd">

                        @if (@context.TiempoFinalH.Any())
                            {
                                foreach (var item in context.TiempoFinalH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoFinal
                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.RetornoH.Any())
                            {
                                foreach (var item in context.RetornoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoRetorno

                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.EsperaH.Any())
                            {
                                foreach (var item in context.EsperaH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoEspera

                            }
                    </td>
                </RowTemplate>
            </TableComponent>

            }
            else
            {
                @*<p style="text-align:center">No hay más procesos en el estado Listo</p>*@
                <div class="alert alert-danger" role="alert" style="text-align:center">
                    No hay procesos en el estado Listo
                </div>
            }

        </div>

        <div class="col">
            @if (EstadoInicial.FinalProceso.Any())
            {

                <TableComponent Items="EstadoInicial.FinalProceso">
                    <TableHeader>
                        <th>Proceso..</th>
                        <th>T. Llegada</th>
                        <th>Rafaga</th>
                        <th>Tiempo Comienzo</th>
                        <th>Tiempo Final</th>
                        <th>Tiempo Retorno</th>
                        <th>Tiempo Espera</th>
                    </TableHeader>
                    <RowTemplate>
                        <td style="border: 1px solid #ddd">
                            @context.Name
                        </td>
                        <td style="border: 1px solid #ddd">

                            @context.TiempoLlegada
                        </td>
                        <td style="border: 1px solid #ddd">
                            @context.Rafaga
                        </td>
                        <td style="border: 1px solid #ddd">

                            @if (@context.TiempoComienzoH.Any())
                            {
                                foreach (var item in context.TiempoComienzoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoComienzo
                            }
                    </td>
                    <td style="border: 1px solid #ddd">

                        @if (@context.TiempoFinalH.Any())
                            {
                                foreach (var item in context.TiempoFinalH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoFinal
                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.RetornoH.Any())
                            {
                                foreach (var item in context.RetornoH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoRetorno

                            }
                    </td>
                    <td style="border: 1px solid #ddd">
                        @if (@context.EsperaH.Any())
                            {
                                foreach (var item in context.EsperaH)
                                {
                                @item
                                <p style="display:inline">,</p>
                                }
                            }
                            else
                            {
                            @context.TiempoEspera

                            }
                    </td>
                </RowTemplate>
            </TableComponent>
            }
            else
            {
                @*<p style="text-align:center">No hay procesos finalizados aun</p>*@
                <div class="alert alert-danger" role="alert" style="text-align:center">
                    No hay procesos finalizados aun
                </div>
            }

        </div>
    </div>
</div>

<br />
<br />


<div class="alert alert-primary" role="alert" style="text-align:center; height:55px">
    Diagrama de Gannt
</div>
@*Dibujando los numeros*@
@for (var i = 0; i < 51; i++)
{
    <div style="position:relative; display:inline; left:@(i*20+13)px; ">
        <p style="display:inline; font-size:12px">@i</p>
    </div>

}
@*Dibujando las lineas verticales*@
<div style="margin-left:10px">
    @for (var i = 0; i < 73; i++)
    {
        <div style="position:relative;  display:inline; left:@(i*20+10)px; width:20px; border: 1px solid black"></div>

    }
</div>

@*//Linea*@
<br />

<div style="position:relative; display:inline width:@(EstadoInicial.TiempoGlobal*20)px; border: 1px solid black"></div>

<br />



@*// Dibujando los cuadrados*@

@foreach (var proc in procesoUIs)
{
    int index = procesoUIs.IndexOf(proc);

    @if (index == 0)
    {
        // Dibujo el mismo proceso en ejecucion
        <ProcesoUI Id=proc.Id Posicion=proc.Posicion Color=@proc.Color />
        // Trying to draw the waiteing time
        @*<ProcesoUI Color="green"  Posicion=proc.Posicion-1/>*@
    }
    else
    {
        aux = 1;
        @if (procesoUIs[(index - aux)].Id == proc.Id)
        {
            // Dibujo el mismo proceso en ejecucion
            <ProcesoUI Id=proc.Id Color=@proc.Color Posicion=proc.Posicion />
            @*<ProcesoUI Color="green" Posicion=proc.Posicion-1/>*@
            @*<ProcesoUI Color="gray" Posicion=proc.Posicion-1/>*@
        }
        else
        {
            <br />
            // Dibujo el nuevo proceso en ejecucion
            <ProcesoUI Id=@proc.Id Color=@proc.Color Posicion=proc.Posicion />
            @*<ProcesoUI Id=@proc.Id Color="gray" Posicion=proc.Posicion-1/>*@
        }
    }
    // Dibujo los procesos en espera
    @*foreach (var espera in EstadoInicial.ProcesosListos)
        {
        if ((espera.TiempoLlegada <= EstadoInicial.TiempoGlobal) && (espera.TiempoComienzo < EstadoInicial.TiempoGlobal))
        {
        <br />
        <ProcesoUI Id=@proc.Id Color="gray" Posicion=proc.Posicion />

        }

        }*@


}
@*// Dibujando los tiempos de espera*@


@foreach (var anulado in EstadoInicial.ProcesosListos)
{
    if ((anulado.TiempoLlegada < EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
    {
        <br />
        @* <p>rafaga en espera: @anulado.Name</p>*@
        @*<div style="position:relative; left:@(EstadoInicial.TiempoGlobal*20+10)px; background-color:gray; border: 1px solid black; width:20px; height:20px"></div>*@

        // foreach (var espera in procesoUIs)
        //{

        <ProcesoUI Color="gray" Posicion=EstadoInicial.TiempoGlobal Id=@anulado.Name />
        //procesoEspera.Add(new ProcesoUI { Id = anulado.Name, Posicion = EstadoInicial.TiempoGlobal });


        //}
    }
}

<br />
@*// Dibujando el nombre del proceso en ejecucion*@
@if (EstadoInicial.ListaEjecucion.Any())
{
    foreach (var eje in EstadoInicial.ListaEjecucion)
    {
        @*<p style="display:inline; color:green">Proceso en ejecucion: @eje.Name</p>*@

        <div class="alert alert-success" role="alert" style="height:55px; text-align:center ">
            Proceso en ejecucion: @eje.Name
        </div>
    }
}

@*// Dibujando el nombre del proceso en espera*@
@foreach (var anulado in EstadoInicial.ProcesosListos)
{
    if ((anulado.TiempoLlegada <= EstadoInicial.TiempoGlobal) && (anulado.TiempoComienzo < EstadoInicial.TiempoGlobal))
    {
        @*<p style="color:gray">Proceso(s) en espera: @anulado.Name</p>*@
        @* <div class="alert alert-dark" role="alert" style="height:55px; text-align:center">
            Proceso en espera: @anulado.Name
            </div>*@
    }
}
<br />
<br />



@code {
    private BloqueControl bloqueControl;
    private EstadoEjecucion estadoEjecucion;
    private EstadoBloqueo estadoBloqueo;
    Queue<Proceso> UiList = new Queue<Proceso>();
    Proceso procesoUi = new Proceso();
    List<int> rafagas = new List<int>();
    private int contadorUi = 0;
    List<int> tiempoUi = new List<int>();
    List<ProcesoUI> procesoUIs = new List<ProcesoUI>();
    private int aux = 0;
    private int auxEs = 0;
    bool ExpulsadoAlterno;


    protected override Task OnInitializedAsync()

    {
        bloqueControl = new BloqueControl();
        estadoEjecucion = new EstadoEjecucion();
        bloqueControl.AgregarProcesoInicial();
        EstadoInicial.Semaforo = false;

        return base.OnInitializedAsync();
    }

    public async Task IniciarEjecucion()
    {
        int inicio = 0;
        bool bandera = false;
        while (EstadoInicial.ProcesosListos.Count > 0)
        {
            EstadoInicial.ProcesosListos = EstadoInicial.OrganizarCola(EstadoInicial.ProcesosListos);

            ExpulsadoAlterno = false;
            Console.WriteLine(EstadoInicial.TiempoGlobal);

            if (EstadoInicial.ListaEjecucion.Count == 0)
            {
                foreach (var item in EstadoInicial.ProcesosListos)
                {
                    if (item.TiempoLlegada <= EstadoInicial.TiempoGlobal && bandera == false)
                    {
                        Proceso siguiente = item;
                        procesoUi = siguiente;
                        EstadoInicial.ListaEjecucion.Add(siguiente);
                        bandera = true;
                        EstadoInicial.ProcesosListos = new Queue<Proceso>(EstadoInicial.ProcesosListos.Where(x => x.Name != item.Name));
                    }
                }
                bandera = false;

            }
            rafagas.Add(EstadoInicial.TiempoGlobal);
            tiempoUi.Add(EstadoInicial.TiempoGlobal);


                        await Task.Delay(1500);

            //if (EstadoInicial.ListaEjecucion.First().TiempoLlegada <= EstadoInicial.TiempoGlobal)
            //{
            Proceso siguienteEjecucion = EstadoInicial.ListaEjecucion.First();
            //siguienteEjecucion.TiempoComienzo = EstadoInicial.TiempoGlobal;
            siguienteEjecucion.TiempoComienzo = EstadoInicial.TiempoGlobal;

            // Parte grafica e historial de tiempos
            if ((siguienteEjecucion.TiempoComienzoH.Contains(siguienteEjecucion.TiempoComienzo) == false) ||
                (siguienteEjecucion.TiempoComienzoH.Contains(EstadoInicial.TiempoGlobal)))
            {
                siguienteEjecucion.TiempoComienzoH.Add(EstadoInicial.TiempoGlobal);
            }

            if (siguienteEjecucion.RafagaH.Contains(siguienteEjecucion.Rafaga) == false)
            {
                siguienteEjecucion.RafagaH.Add(siguienteEjecucion.Rafaga);

            }

            while (siguienteEjecucion.RafagaTemporal > 0 && EstadoInicial.ProcesoBloqueado == false && ExpulsadoAlterno == false)
            {

                foreach (var nuevoProceso in EstadoInicial.ProcesosListos)
                {
                    if (nuevoProceso.TiempoLlegada <= EstadoInicial.TiempoGlobal && nuevoProceso.RafagaTemporal < siguienteEjecucion.RafagaTemporal)
                    {
                        ExpulsadoAlterno = true;
                        siguienteEjecucion.Expulsado = true;
                        EstadoInicial.ListaEjecucion.Remove(siguienteEjecucion);

                    }
                }
                if (ExpulsadoAlterno == true)
                {
                    //siguienteEjecucion.TiempoComienzoH.Add(EstadoInicial.TiempoGlobal );
                    siguienteEjecucion.RafagaH.Add(siguienteEjecucion.RafagaTemporal);
                    siguienteEjecucion.TiempoFinalH.Add(EstadoInicial.TiempoGlobal);
                    int retorno = EstadoInicial.TiempoGlobal - siguienteEjecucion.TiempoLlegada;
                    int espera = retorno - (siguienteEjecucion.Rafaga-siguienteEjecucion.RafagaTemporal);
                    siguienteEjecucion.RetornoH.Add(retorno);
                    siguienteEjecucion.EsperaH.Add(espera);

                    EstadoInicial.ProcesosListos.Enqueue(siguienteEjecucion);

                }


                if (ExpulsadoAlterno == false)
                {
                    await estadoEjecucion.Ejecutar(siguienteEjecucion);
                    EstadoInicial.TiempoGlobal++;
                    procesoUIs.Add(new ProcesoUI { Id = siguienteEjecucion.Name, Posicion = EstadoInicial.TiempoGlobal, Color = "green" });
                    rafagas[(rafagas.Count - 1)] = rafagas[(rafagas.Count - 1)] + 1;
                    tiempoUi.Add(EstadoInicial.TiempoGlobal);
                }

                 await Task.Delay(1500);

                StateHasChanged();

            }
            EstadoInicial.ProcesoBloqueado = false;
            //siguiente.Bloqueado = false;
            contadorUi++;
            //}
            //else
            //{
            //        EstadoInicial.TiempoGlobal++;

            //}

        }
        //bloqueControl.IniciarOperacion();
    }
    public async Task Bloquear()
    {
        EstadoInicial.ProcesoBloqueado = true;
        foreach (Proceso bloqueado in EstadoInicial.ListaEjecucion)
        {
            bloqueado.FueBloqueado = true;
            // Genera simplemente un Warning en el navegador
            EstadoInicial.ListaEjecucion.Remove(bloqueado);
            EstadoInicial.ProcesosListos.Enqueue(bloqueado);
        }
    }
    public async Task IniciarBloque()
    {
        //Console.WriteLine("Aca");
        await bloqueControl.AgregarProcesoInicial();
        //UiList = EstadoInicial.ProcesosListos;
        //Facade.AddProceso(EstadoInicial.ProcesosListos);
    }

    public async Task Reinicio()
    {
        EstadoInicial.ProcesosListos.Clear();
        EstadoInicial.ListaEjecucion.Clear();
        EstadoInicial.FinalProceso.Clear();

    }
    public async Task Agregar()
    {
        await bloqueControl.AgregarNuevoProceso();

    }


}

@*@foreach (var finalizado in EstadoInicial.FinalProceso)
    {

    <p style="display:inline">rafaga fin: @finalizado.Name</p>
    // Cuadrado
    <div style="position:relative; left:@(finalizado.TiempoFinal*20)px; background-color:green; border: 1px solid black; width:20px; height:20px"></div>

    }*@
@*


    @*
    <table>
    <thead>
    <tr>
    <th>Proceso</th>
    <th>Tiempo Llegada</th>
    <th>Rafaga</th>
    <th>Tiempo Comienzo</th>
    <th>Tiempo Final</th>
    <th>Tiempo Retorno</th>
    <th>Tiempo Espera</th>

    </tr>
    </thead>
    <tbody>
    @foreach (Proceso item in EstadoInicial.FinalProceso)
    {
    <tr>
    <td>
    @item.Name
    </td>
    <td>
    @item.TiempoLlegada
    </td>
    <td>
    @item.Rafaga
    </td>
    <td>
    @item.TiempoComienzo
    </td><td>
    @item.TiempoFinal
    </td><td>
    @item.TiempoRetorno
    </td><td>
    @item.TiempoEspera
    </td>
    </tr>
    }
    </tbody>
    </table>*@
     @*<div class="container">
    <div class="row">

    <div class="col" style="width:20px; height:20px; border: 1px solid black;">

    </div>

    <div class="col" style="width:20px; height:20px">
    @for (var i = 0; i < 42; i++)
    {
    <div style="position:relative; display:inline; left:@(i*20+10)px; width:20px">
    <p style="display:inline; font-size:12px">@i</p>
    </div>

    }

    <br />

    @for (var i = 0; i < 60; i++)
    {
    <div style="position:relative; display:inline; left:@(i*20+10)px; width:20px; border: 1px solid black"></div>

    }
    </div>

    </div>

    <div class="row">

    <div class="col" style="width:20px; height:20px; border: 1px solid black; ">

    </div>

    <div class="col" style="width:20px; height:20px">

    </div>
    </div>
    <br />
    <div class="row">
    <div class="col">
    @foreach (var item in rafagas)
    {
    @*<div style="position:relative; display:inline;  left:@(item*10)px; width:20px; border: 1px solid black"></div>

    <p>rafaga: item</p>
    Cuadrado

    }
    </div>
    <div class="col">
    @foreach (var item in rafagas)
    {
    // Cuadrado
    <div style="position:relative; left:@(item*20)px; border: 1px solid black; width:20px; height:20px"></div>

    }
    </div>
    </div>
    </div>
*@